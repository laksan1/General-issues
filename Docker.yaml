#Backend
FROM node:14
WORKDIR /usr/src/nikaserver
COPY package.json ./
RUN npm install
COPY . .
EXPOSE 5000
CMD [ "npm", "run", "dev", "--scripts-prepend-node-path=auto"]

# Команда "RUN" запускается только при установке, а "CMD" при запуске образа
# Команда "EXPOSE" задает наружный порт 
# COPY package.json  - Для взятия данных из кэша. Node модули не меняются. 

#Mongo
# Use root/example as user/password credentials
version: '3.1'
services:
mongo:
    image: mongo
    restart: always
    environment:
    MONGO_INITDB_ROOT_USERNAME: root
    MONGO_INITDB_ROOT_PASSWORD: example
mongo-express:
    image: mongo-express
    restart: always
    ports:
    - 8081:8081
    environment:
    ME_CONFIG_MONGODB_ADMINUSERNAME: root
    ME_CONFIG_MONGODB_ADMINPASSWORD: example
    ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

- docker build . -t my_image // эта команда собирает образ Docker из Dockerfile и «контекста». 
				Контекст сборки — это набор файлов, расположенных по определённому пути или URL. 
				Используйте флаг -t, чтобы задать имя образа. 
				Например, команда docker build -t my_container . соберёт образ, используя текущую директорию, на что указывает точка в конце

- docker run -d -p 5000:6000 --name my_container --rm  7dfe9c0e2172 // (Id or name) запускает контейнер, на основе указанного образа.
                                        5000 - Порт на лоакальной машине. 6000 - порт для мапинга на локальный (EXPOSE).
                                        Параметр -d (detach)
                                        --rm - Удаляет контейнер после остановки
                                        Эту команду можно дополнять другими, например, docker run my_image -it bash запустит контейнер, 
                                        а затем запустит в нём bash.



- docker images

- docker ps — показывает список запущенных контейнеров // (--all (показывает все контенеры, по умолчанию - показывает все запущенные контейнеры))

- docker pull mongo (example) // скачать определённый образ или набор образов (репозиторий)

- docker rm // удаляет один и более контейнеров, например, docker rm my_container

- docker rmi // удаляет один и более образов, например, docker rmi my_image

- docker stop //  останавливает один и более контейнеров. 
				Команда docker stop my_container остановит один контейнер, а docker stop $(docker ps -a -q) — все запущенные. 
				Более грубый способ — использовать docker kill my_container

- docker container prune// удаляет все запущенные контейнеры

-  docker tag nika-server laksan/nika-server // создать новый образ на основе имеющегося (nika-server). 
